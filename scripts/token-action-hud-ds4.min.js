const e={ID:"token-action-hud-ds4"},t={ID:"token-action-hud-core"},s="2.0",i={spellcasting:{id:"spellcasting",name:"DS4.CombatValuesSpellcasting",type:"system"},targeted_spellcasting:{id:"targeted_spellcasting",name:"DS4.CombatValuesTargetedSpellcasting",type:"system"},melee:{id:"melee",name:"DS4.AttackTypeMelee",type:"system"},ranged:{id:"ranged",name:"DS4.AttackTypeRanged",type:"system"},checks:{id:"checks",name:"DS4.Checks",type:"system"},token:{id:"token",name:"tokenActionHud.token",type:"system"}};let n=null;Hooks.once("tokenActionHudCoreApiReady",(async t=>{n=class Utils{static getSetting(s,i=null){let n=i??null;try{n=game.settings.get(e.ID,s)}catch(e){t.api.Logger.debug(`Error fetching setting '${s}': ${e.message}`)}return n}static async setSetting(s,i){try{const n=await game.settings.set(e.ID,s,i);return t.api.Logger.debug(`Setting '${s}' successfully set to '${i}'`),n}catch(e){return t.api.Logger.error(`Error setting '${s}': ${e.message}`),null}}static validateObject(e,t){return!(!e||"object"!=typeof e)&&t.every((t=>t in e))}}}));let o=null;Hooks.once("tokenActionHudCoreApiReady",(async e=>{o=class ActionHandler extends e.api.ActionHandler{async buildSystemActions(t){try{if(this.actors=this.actor?[this.actor]:this.#e(),this.displayUnequipped=n.getSetting("displayUnequipped"),this.actor){this.actorType=this.actor.type;let t=this.actor.items;t=e.api.Utils.sortItemsByName(t),this.items=t,"character"!==this.actorType&&"creature"!==this.actorType||this.#t()}else this.#s()}catch(e){console.error(`Error building system actions: ${e.message}`),ui.notifications?.error(`Error building system actions: ${e.message}`)}}#t(){try{this.#i("item",["weapon"]),this.#n("item",["spell"]),this.#o("check","checks")}catch(e){console.error(`Error building character actions: ${e.message}`),ui.notifications?.error(`Error building character actions: ${e.message}`)}}#s(){if(this.actors&&0!==this.actors.length)try{const e={id:"token",type:"system"},t={id:"token-count-info",name:`${this.actors.length} tokens selected`,encodedValue:["utility","tokenCount"].join(this.delimiter),cssClass:"inactive"};this.addActions([t],e),this.actors&&this.actors.length>0&&this.#r("check","checks")}catch(e){console.error(`Error building multiple token actions: ${e.message}`)}}#e(){try{const e=canvas.tokens.controlled;if(!e||0===e.length)return[];const t=[],s=new Set;return e.filter((e=>e.actor)).forEach((e=>{const i=e.actor;s.has(i.id)||(s.add(i.id),t.push(i))})),t}catch(e){return console.error(`Error getting selected actors: ${e.message}`),[]}}#o(t,s){try{if(!this.actor?.system?.checks)return void console.warn("Actor is missing system.checks property");const i=Object.entries(this.actor.system.checks).map((s=>{const i=s[0],n=`DS4.Checks${i.charAt(0).toUpperCase()+i.slice(1)}`,o=`${t}-${i}`,r=e.api.Utils.i18n(n),a=CONFIG.DS4.icons.checks[i],c=`${t}${e.api.Utils.i18n(`DS4.Checks${i}`)}`;return{id:o,name:r,img:a,encodedValue:[t,i].join(this.delimiter),info1:{text:s[1].valueOf()},listName:c}})).sort(((e,t)=>e.name.localeCompare(t.name))),n={id:s,type:"system"};this.addActions(i,n)}catch(e){console.error(`Error building checks: ${e.message}`)}}#r(t,s){try{const i=this.actors.filter((e=>e?.system?.checks&&Object.keys(e.system.checks).length>0));if(0===i.length)return void console.warn("No selected actors have valid check data");const n=i[0];if(!n?.system?.checks)return void console.warn("Reference actor is missing system.checks property");const o=Object.keys(n.system.checks);if(0===o.length)return void console.warn("Reference actor has no checks defined");const r=o.map((s=>{try{const i=`DS4.Checks${s.charAt(0).toUpperCase()+s.slice(1)}`,n=`multitoken-${t}-${s}`,o=e.api.Utils.i18n(i);let r="";try{r=CONFIG.DS4?.icons?.checks?.[s]||""}catch(e){console.warn(`Could not find icon for check: ${s}`,e)}const a=`${t}${e.api.Utils.i18n(`DS4.Checks${s}`)}`;return{id:n,name:o,img:r,encodedValue:["multitoken",t,s].join(this.delimiter),listName:a}}catch(e){return console.error(`Error building action for check ${s}: ${e.message}`),null}})).filter((e=>null!==e));if(0===r.length)return void console.warn("No valid actions were created for multiple token checks");const a={id:s,type:"system"};this.addActions(r,a)}catch(e){console.error(`Error building multiple token checks: ${e.message}`)}}#n(e,t){try{this.#a(e,t,"spellcasting","spellcasting"),this.#a(e,t,"targetedSpellcasting","targeted_spellcasting")}catch(e){console.error(`Error building spells: ${e.message}`)}}#a(e,t,s,i){try{if(!this.actor?.system?.combatValues?.[s]?.total)return void console.warn(`Actor is missing combatValues.${s}`);if(!this.actor.items)return void console.warn("Actor has no items");const n=e,o=Object.entries(this.actor.items.filter((e=>t.includes(e.type)&&e.system.spellType===s&&(this.displayUnequipped||!0===e.system.equipped)))).map((e=>{const t=e[1].id,i=`${n}-${e[1].id}`,o=e[1].name,r=e[1].name,a=`${n}${o}`,c=[n,t].join(this.delimiter),l=e[1].img;let d=this.actor.system.combatValues[s].total.valueOf();try{const t=e[1].system.spellModifier?.numerical;if(void 0!==t){const e=Number(t);if(isNaN(e))throw new Error(`Item spell modifier "${t}" cannot be converted to a number`);d+=e}}catch(t){console.error(`Error processing spell modifier for ${e[1].name}: ${t.message}`)}const u={text:d,class:"custominfo"};this.displayUnequipped&&e[1].system.equipped&&(u.text=`${u.text}\n✔`);return{id:i,name:r,encodedValue:c,info1:u,img:l,cssClass:"",listName:a,equipped:e[1].system.equipped||!1}})).sort(((e,t)=>{if(this.displayUnequipped){if(e.equipped&&!t.equipped)return-1;if(!e.equipped&&t.equipped)return 1}return e.name.localeCompare(t.name)})),r={id:i,type:"system"};this.addActions(o,r)}catch(e){console.error(`Error building ${s} spells: ${e.message}`)}}#i(e,t){try{this.#c(e,t,"melee","melee"),this.#c(e,t,"ranged","ranged")}catch(e){console.error(`Error building weapons: ${e.message}`)}}#c(e,t,s,i){try{if(!this.actor?.system?.combatValues?.[`${s}Attack`]?.total)return void console.warn(`Actor is missing combatValues.${s}Attack`);const n=e,o=this.actor.system.combatValues[`${s}Attack`].total.valueOf();if(!this.actor.items)return void console.warn("Actor has no items");const r=Object.entries(this.actor.items.filter((e=>t.includes(e.type)&&e.system.attackType===s&&(this.displayUnequipped||!0===e.system.equipped)))).map((e=>{const t=e[1].id,s=`${n}-${e[1].id}`,i=e[1].name,r=e[1].name,a=`${n}${i}`,c=[n,t].join(this.delimiter),l=e[1].img,d=e[1].system.weaponBonus||0,u=Number(d)||0,p={text:o+u,class:"custominfo"};this.displayUnequipped&&e[1].system.equipped&&(p.text=`${p.text}\n✔`);return{id:s,name:r,encodedValue:c,info1:p,img:l,cssClass:"",listName:a,equipped:e[1].system.equipped||!1}})).sort(((e,t)=>{if(this.displayUnequipped){if(e.equipped&&!t.equipped)return-1;if(!e.equipped&&t.equipped)return 1}return e.name.localeCompare(t.name)})),a={id:i,type:"system"};this.addActions(r,a)}catch(e){console.error(`Error building ${s} weapons: ${e.message}`)}}}}));let r=null;Hooks.once("tokenActionHudCoreApiReady",(async e=>{try{const t=i;Object.values(t).forEach((t=>{t.name=e.api.Utils.i18n(t.name),t.listName=`Group: ${e.api.Utils.i18n(t.listName??t.name)}`}));const s=Object.values(t);r={layout:[{nestId:"weapons",id:"weapons",name:e.api.Utils.i18n("DS4.ItemTypeWeaponPlural"),groups:[{...t.melee,nestId:"weapons_melee"},{...t.ranged,nestId:"weapons_ranged"}]},{nestId:"spells",id:"spells",name:e.api.Utils.i18n("DS4.ItemTypeSpellPlural"),groups:[{...t.spellcasting,nestId:"spells_spellcasting"},{...t.targeted_spellcasting,nestId:"spells_tspellcasting"}]},{nestId:"checks",id:"checks",name:e.api.Utils.i18n("DS4.Checks"),groups:[{...t.checks,nestId:"checks_checks"}]},{nestId:"utility",id:"utility",name:e.api.Utils.i18n("tokenActionHud.utility"),groups:[{...t.token,nestId:"utility_token"}]}],groups:s}}catch(e){console.error(`Error setting up default layout: ${e.message}`)}}));let a=null;function register(t){try{game.settings.register(e.ID,"displayUnequipped",{name:game.i18n.localize("tokenActionHud.ds4.settings.displayUnequipped.name"),hint:game.i18n.localize("tokenActionHud.ds4.settings.displayUnequipped.hint"),scope:"client",config:!0,type:Boolean,default:!1,onChange:e=>{try{t(e)}catch(e){console.error(`Error in displayUnequipped onChange: ${e.message}`)}}})}catch(e){console.error(`Error registering settings: ${e.message}`)}}Hooks.once("tokenActionHudCoreApiReady",(async e=>{a=class RollHandler extends e.api.RollHandler{async handleActionClick(e,t){const s=t.split("|"),i="multitoken"===s[0],n=i?s[1]:s[0],o=i?s[2]:s[1];if(["item"].includes(n)&&this.isRenderItem()&&!i)return this.doRenderItem(this.actor,o);const r=["character","creature"];if(this.actor&&!i)return void await this.#l(e,this.actor,this.token,n,o,!1);const a=canvas.tokens.controlled.filter((e=>r.includes(e.actor?.type)));for(const t of a){const s=t.actor;await this.#l(e,s,t,n,o,i)}}async handleActionHover(e,t){}async handleGroupClick(e,t){}async#l(e,t,s,i,n,o=!1){try{switch(i){case"item":this.#d(e,t,n);break;case"utility":this.#u(s,n);break;case"check":this.#p(e,t,s,n,o);break;default:console.warn(`Unknown action type: ${i}`)}}catch(e){ui.notifications.error(`Error handling action: ${e.message}`)}}#d(e,t,s){const i=t.items.get(s);try{i.roll(e)}catch(e){ui.notifications.error(`Error rolling item: ${e.message}`)}}#p(e,t,s,i,n=!1){try{if(!t)return void console.warn("Cannot roll check: No actor available");if(!t.rollCheck)return void console.warn(`Actor ${t.name} (${t.id}) does not have a rollCheck method`);t.rollCheck(i,s.document)}catch(e){ui.notifications.error(`Error rolling check: ${e.message}`)}}async#u(e,t){try{if("endTurn"===t)game.combat?.current?.tokenId===e.id&&await(game.combat?.nextTurn());else console.warn(`Unknown utility action: ${t}`)}catch(e){ui.notifications.error(`Error handling utility action: ${e.message}`)}}}}));let c=null;Hooks.once("tokenActionHudCoreApiReady",(async t=>{c=class SystemManager extends t.api.SystemManager{getActionHandler(){return new o}getAvailableRollHandlers(){return{core:"Core Template"}}getRollHandler(e){let t;return t=new a,t}async registerDefaults(){return r}registerSettings(e){register(e)}registerStyles(){return{template:{class:"tah-style-ds4-style",file:"tah-ds4-style",moduleId:e.ID,name:"DS4 Style"}}}}})),Hooks.on("tokenActionHudCoreApiReady",(async()=>{try{const t=game.modules.get(e.ID);if(!t)return void console.error(`${e.ID} module not found`);t.api={requiredCoreModuleVersion:"2.0",SystemManager:c},Hooks.call("tokenActionHudSystemReady",t),console.log(`${e.ID} | System ready`)}catch(t){console.error(`${e.ID} | Error initializing module:`,t)}})),Hooks.once("init",(()=>{console.log(`${e.ID} | Initializing DS4 Token Action HUD`)}));export{o as ActionHandler,t as CORE_MODULE,r as DEFAULTS,i as GROUP,e as MODULE,s as REQUIRED_CORE_MODULE_VERSION,a as RollHandler,c as SystemManager,n as Utils,register};
//# sourceMappingURL=token-action-hud-ds4.min.js.map
