{"version":3,"file":"token-action-hud-ds4.min.js","sources":["constants.js","utils.js","action-handler.js","defaults.js","roll-handler.js","settings.js","system-manager.js","init.js"],"sourcesContent":["/**\n * Module-based constants\n * @type {{ID: string}}\n */\nexport const MODULE = {\n  ID: 'token-action-hud-ds4'\n}\n\n/**\n * Core module\n * @type {{ID: string}}\n */\nexport const CORE_MODULE = {\n  ID: 'token-action-hud-core'\n}\n\n/**\n * Core module version required by the system module\n * @type {string}\n */\nexport const REQUIRED_CORE_MODULE_VERSION = '2.0'\n\n/**\n * Groups configuration for the Token Action HUD\n * @type {Object<string, {id: string, name: string, type: string, listName?: string}>}\n */\nexport const GROUP = {\n  spellcasting: {\n    id: 'spellcasting',\n    name: 'DS4.CombatValuesSpellcasting',\n    type: 'system'\n  },\n  targeted_spellcasting: {\n    id: 'targeted_spellcasting',\n    name: 'DS4.CombatValuesTargetedSpellcasting',\n    type: 'system'\n  },\n  melee: {\n    id: 'melee',\n    name: 'DS4.AttackTypeMelee',\n    type: 'system'\n  },\n  ranged: {\n    id: 'ranged',\n    name: 'DS4.AttackTypeRanged',\n    type: 'system'\n  },\n  checks: {\n    id: 'checks',\n    name: 'DS4.Checks',\n    type: 'system'\n  },\n  token: {\n    id: 'token',\n    name: 'tokenActionHud.token',\n    type: 'system'\n  }\n}\n","import { MODULE } from './constants.js'\n\nexport let Utils = null\n\nHooks.once('tokenActionHudCoreApiReady', async (coreModule) => {\n  /**\n     * Utility functions\n     */\n  Utils = class Utils {\n    /**\n         * Get setting\n         * @param {string} key               The key\n         * @param {string=null} defaultValue The default value\n         * @returns {string}                 The setting value\n         */\n    static getSetting (key, defaultValue = null) {\n      let value = defaultValue ?? null\n      try {\n        value = game.settings.get(MODULE.ID, key)\n      } catch (error) {\n        coreModule.api.Logger.debug(`Error fetching setting '${key}': ${error.message}`)\n      }\n      return value\n    }\n\n    /**\n         * Set setting\n         * @param {string} key   The key\n         * @param {string} value The value\n         * @returns {Promise<string|null>} The updated value or null if there was an error\n         */\n    static async setSetting (key, value) {\n      try {\n        const result = await game.settings.set(MODULE.ID, key, value)\n        coreModule.api.Logger.debug(`Setting '${key}' successfully set to '${value}'`)\n        return result\n      } catch (error) {\n        coreModule.api.Logger.error(`Error setting '${key}': ${error.message}`)\n        return null\n      }\n    }\n\n    /**\n         * Validates if an object has the expected properties\n         * @param {object} obj - The object to validate\n         * @param {string[]} requiredProps - Array of required property names\n         * @returns {boolean} True if the object has all required properties\n         */\n    static validateObject (obj, requiredProps) {\n      if (!obj || typeof obj !== 'object') return false\n      return requiredProps.every(prop => prop in obj)\n    }\n  }\n})\n","// System Module Imports\nimport { Utils } from './utils.js'\n\nexport let ActionHandler = null\n\nHooks.once('tokenActionHudCoreApiReady', async (coreModule) => {\n  /**\n   * Extends Token Action HUD Core's ActionHandler class and builds system-defined actions for the HUD\n   */\n  ActionHandler = class ActionHandler extends coreModule.api.ActionHandler {\n    /**\n     * Build system actions\n     * Called by Token Action HUD Core\n     * @override\n     * @param {array} groupIds\n     */\n    async buildSystemActions (groupIds) {\n      try {\n        // Set actor and token variables\n        this.actors = !this.actor ? this.#getSelectedActors() : [this.actor]\n\n        // Settings\n        this.displayUnequipped = Utils.getSetting('displayUnequipped')\n\n        if (this.actor) {\n          // Handle single actor\n          this.actorType = this.actor.type\n\n          // Set items variable\n          let items = this.actor.items\n          items = coreModule.api.Utils.sortItemsByName(items)\n          this.items = items\n\n          if (this.actorType === 'character' || this.actorType === 'creature') {\n            this.#buildCharacterActions()\n          }\n        } else {\n          // Handle multiple actors\n          this.#buildMultipleTokenActions()\n        }\n      } catch (error) {\n        console.error(`Error building system actions: ${error.message}`)\n        ui.notifications?.error(\n          `Error building system actions: ${error.message}`\n        )\n      }\n    }\n\n    /**\n     * Build character actions\n     * @private\n     */\n    #buildCharacterActions () {\n      try {\n        this.#buildWeapons('item', ['weapon'])\n        this.#buildSpells('item', ['spell'])\n        this.#buildChecks('check', 'checks')\n      } catch (error) {\n        console.error(`Error building character actions: ${error.message}`)\n        ui.notifications?.error(\n          `Error building character actions: ${error.message}`\n        )\n      }\n    }\n\n    /**\n     * Build multiple token actions\n     * @private\n     * @returns {object}\n     */\n    #buildMultipleTokenActions () {\n      if (!this.actors || this.actors.length === 0) return\n\n      try {\n        // Create a utility group for multiple token selection\n        const groupData = { id: 'token', type: 'system' }\n\n        // Add selected tokens count\n        const tokenCountInfo = {\n          id: 'token-count-info',\n          name: `${this.actors.length} tokens selected`,\n          encodedValue: ['utility', 'tokenCount'].join(this.delimiter),\n          cssClass: 'inactive'\n        }\n\n        this.addActions([tokenCountInfo], groupData)\n\n        // Add skill checks for multiple tokens\n        if (this.actors && this.actors.length > 0) {\n          this.#buildMultiTokenChecks('check', 'checks')\n        }\n      } catch (error) {\n        console.error(\n          `Error building multiple token actions: ${error.message}`\n        )\n      }\n    }\n\n    /**\n     * Get all selected actors\n     * @private\n     * @returns {Array} Array of selected actors\n     */\n    #getSelectedActors () {\n      try {\n        const tokens = canvas.tokens.controlled\n        if (!tokens || tokens.length === 0) return []\n\n        const uniqueActors = []\n        const actorIds = new Set()\n        tokens\n          .filter((token) => token.actor)\n          .forEach((token) => {\n            const actor = token.actor\n            if (!actorIds.has(actor.id)) {\n              actorIds.add(actor.id)\n              uniqueActors.push(actor)\n            }\n          })\n        return uniqueActors\n      } catch (error) {\n        console.error(`Error getting selected actors: ${error.message}`)\n        return []\n      }\n    }\n\n    /**\n     * Build Checks\n     * @private\n     * @param {string} actionType\n     * @param {string} groupId\n     */\n    #buildChecks (actionType, groupId) {\n      try {\n        if (!this.actor?.system?.checks) {\n          console.warn('Actor is missing system.checks property')\n          return\n        }\n\n        const actions = Object.entries(this.actor.system.checks)\n          .map(\n            (check) => {\n              const checkId = check[0]\n              const capitalizedCheckId =\n                checkId.charAt(0).toUpperCase() + checkId.slice(1)\n              const translationKey = `DS4.Checks${capitalizedCheckId}`\n              const id = `${actionType}-${checkId}`\n              const name = coreModule.api.Utils.i18n(translationKey)\n              const img = CONFIG.DS4.icons.checks[checkId]\n              const listName = `${actionType}${coreModule.api.Utils.i18n(`DS4.Checks${checkId}`)}`\n              const encodedValue = [actionType, checkId].join(this.delimiter)\n              const infoText = { text: check[1].valueOf() }\n              return {\n                id,\n                name,\n                img,\n                encodedValue,\n                info1: infoText,\n                listName\n              }\n            }\n            // Sort actions alphabetically by name for easier navigation\n          )\n          .sort((a, b) => a.name.localeCompare(b.name))\n        const groupData = { id: groupId, type: 'system' }\n        this.addActions(actions, groupData)\n      } catch (error) {\n        console.error(`Error building checks: ${error.message}`)\n      }\n    }\n\n    /**\n     * Build Checks for multiple tokens\n     * @private\n     * @param {string} actionType\n     * @param {string} groupId\n     */\n    #buildMultiTokenChecks (actionType, groupId) {\n      try {\n        // Check if we have valid actors with check data\n        const validActors = this.actors.filter(\n          (actor) =>\n            actor?.system?.checks &&\n            Object.keys(actor.system.checks).length > 0\n        )\n\n        if (validActors.length === 0) {\n          console.warn('No selected actors have valid check data')\n          return\n        }\n\n        // Get check IDs from the first valid actor (assuming all actors have the same checks)\n        const referenceActor = validActors[0]\n\n        if (!referenceActor?.system?.checks) {\n          console.warn('Reference actor is missing system.checks property')\n          return\n        }\n\n        const checkIds = Object.keys(referenceActor.system.checks)\n\n        if (checkIds.length === 0) {\n          console.warn('Reference actor has no checks defined')\n          return\n        }\n\n        const actions = checkIds\n          .map((checkId) => {\n            try {\n              const capitalizedCheckId =\n                checkId.charAt(0).toUpperCase() + checkId.slice(1)\n              const translationKey = `DS4.Checks${capitalizedCheckId}`\n              const id = `multitoken-${actionType}-${checkId}`\n              const name = coreModule.api.Utils.i18n(translationKey)\n              let img = ''\n\n              // Safely access the icon if it exists\n              try {\n                img = CONFIG.DS4?.icons?.checks?.[checkId] || ''\n              } catch (iconError) {\n                console.warn(\n                  `Could not find icon for check: ${checkId}`,\n                  iconError\n                )\n              }\n\n              const listName = `${actionType}${coreModule.api.Utils.i18n(`DS4.Checks${checkId}`)}`\n              const encodedValue = ['multitoken', actionType, checkId].join(\n                this.delimiter\n              )\n\n              // For multiple tokens, use a descriptive label to indicate multi-roll\n              return {\n                id,\n                name,\n                img,\n                encodedValue,\n                listName\n              }\n            } catch (innerError) {\n              console.error(\n                `Error building action for check ${checkId}: ${innerError.message}`\n              )\n              return null\n            }\n          })\n          .filter((action) => action !== null) // Filter out any null actions\n\n        if (actions.length === 0) {\n          console.warn(\n            'No valid actions were created for multiple token checks'\n          )\n          return\n        }\n\n        // Add a \"Checks\" header/group for multiple tokens\n        const groupData = { id: groupId, type: 'system' }\n        this.addActions(actions, groupData)\n      } catch (error) {\n        console.error(`Error building multiple token checks: ${error.message}`)\n      }\n    }\n\n    /**\n     * Build Spells\n     * @private\n     * @param {string} groupId\n     * @param {string[]} itemTypes\n     */\n    #buildSpells (groupId, itemTypes) {\n      try {\n        this.#buildSpellsByType(\n          groupId,\n          itemTypes,\n          'spellcasting',\n          'spellcasting'\n        )\n        this.#buildSpellsByType(\n          groupId,\n          itemTypes,\n          'targetedSpellcasting',\n          'targeted_spellcasting'\n        )\n      } catch (error) {\n        console.error(`Error building spells: ${error.message}`)\n      }\n    }\n\n    /**\n     * Build Spells by type\n     * @private\n     * @param {string} groupId - The group ID\n     * @param {string[]} itemTypes - Array of item types to include\n     * @param {string} spellType - Type of spell (\"spellcasting\" or \"targetedSpellcasting\")\n     * @param {string} groupDataId - ID for the group data\n     */\n    #buildSpellsByType (groupId, itemTypes, spellType, groupDataId) {\n      try {\n        if (!this.actor?.system?.combatValues?.[spellType]?.total) {\n          console.warn(`Actor is missing combatValues.${spellType}`)\n          return\n        }\n\n        if (!this.actor.items) {\n          console.warn('Actor has no items')\n          return\n        }\n\n        const actionType = groupId\n        const actions = Object.entries(\n          this.actor.items.filter(\n            (el) =>\n              itemTypes.includes(el.type) &&\n              el.system.spellType === spellType &&\n              (this.displayUnequipped || el.system.equipped === true)\n          )\n        )\n          .map((item) => {\n            const itemId = item[1].id\n            const id = `${actionType}-${item[1].id}`\n            const label = item[1].name\n            const name = item[1].name\n            const listName = `${actionType}${label}`\n            const encodedValue = [actionType, itemId].join(this.delimiter)\n            const img = item[1].img\n            // Get base spell value\n            let spellValue =\n              this.actor.system.combatValues[spellType].total.valueOf()\n\n            // Add numerical modifier if it exists on the item\n            try {\n              const numericalMod = item[1].system.spellModifier?.numerical\n              if (numericalMod !== undefined) {\n                const numericValue = Number(numericalMod)\n                if (isNaN(numericValue)) {\n                  throw new Error(\n                    `Item spell modifier \"${numericalMod}\" cannot be converted to a number`\n                  )\n                }\n                spellValue += numericValue\n              }\n            } catch (error) {\n              console.error(\n                `Error processing spell modifier for ${item[1].name}: ${error.message}`\n              )\n            }\n\n            const infoText = {\n              text: spellValue,\n              class: 'custominfo'\n            }\n\n            // Add equipped indicator when displaying both equipped and unequipped items\n            if (this.displayUnequipped && item[1].system.equipped) {\n              infoText.text = `${infoText.text}\\n✔`\n            }\n            const cssClass = ''\n            return {\n              id,\n              name,\n              encodedValue,\n              info1: infoText,\n              img,\n              cssClass,\n              listName,\n              equipped: item[1].system.equipped || false // Track equipped status for sorting\n            }\n            // Sort actions: first equipped items alphabetically, then unequipped alphabetically\n          })\n          .sort((a, b) => {\n            // If displaying both equipped and unequipped items\n            if (this.displayUnequipped) {\n              // If one is equipped and the other isn't, equipped comes first\n              if (a.equipped && !b.equipped) return -1\n              if (!a.equipped && b.equipped) return 1\n            }\n            // Otherwise sort alphabetically by name\n            return a.name.localeCompare(b.name)\n          })\n        const groupData = { id: groupDataId, type: 'system' }\n        this.addActions(actions, groupData)\n      } catch (error) {\n        console.error(`Error building ${spellType} spells: ${error.message}`)\n      }\n    }\n\n    /**\n     * Build Weapons\n     * @private\n     * @param {string} groupId\n     * @param {string[]} itemTypes\n     */\n    #buildWeapons (groupId, itemTypes) {\n      try {\n        this.#buildWeaponsByType(groupId, itemTypes, 'melee', 'melee')\n        this.#buildWeaponsByType(groupId, itemTypes, 'ranged', 'ranged')\n      } catch (error) {\n        console.error(`Error building weapons: ${error.message}`)\n      }\n    }\n\n    /**\n     * Build Weapons by type\n     * @private\n     * @param {string} groupId - The group ID\n     * @param {string[]} itemTypes - Array of item types to include\n     * @param {string} attackType - Type of attack (\"melee\" or \"ranged\")\n     * @param {string} groupDataId - ID for the group data\n     */\n    #buildWeaponsByType (groupId, itemTypes, attackType, groupDataId) {\n      try {\n        if (!this.actor?.system?.combatValues?.[`${attackType}Attack`]?.total) {\n          console.warn(`Actor is missing combatValues.${attackType}Attack`)\n          return\n        }\n\n        const actionType = groupId\n        const attackValue =\n          this.actor.system.combatValues[`${attackType}Attack`].total.valueOf()\n\n        if (!this.actor.items) {\n          console.warn('Actor has no items')\n          return\n        }\n\n        const actions = Object.entries(\n          this.actor.items.filter(\n            (el) =>\n              itemTypes.includes(el.type) &&\n              el.system.attackType === attackType &&\n              (this.displayUnequipped || el.system.equipped === true)\n          )\n        )\n          .map((item) => {\n            const itemId = item[1].id\n            const id = `${actionType}-${item[1].id}`\n            const label = item[1].name\n            const name = item[1].name\n            const listName = `${actionType}${label}`\n            const encodedValue = [actionType, itemId].join(this.delimiter)\n            const img = item[1].img\n            const weaponBonusRaw = item[1].system.weaponBonus || 0\n            const weaponBonus = Number(weaponBonusRaw) || 0\n            const infoText = {\n              text: attackValue + weaponBonus,\n              class: 'custominfo'\n            }\n\n            // Add equipped indicator when displaying both equipped and unequipped items\n            if (this.displayUnequipped && item[1].system.equipped) {\n              infoText.text = `${infoText.text}\\n✔`\n            }\n            const cssClass = ''\n            return {\n              id,\n              name,\n              encodedValue,\n              info1: infoText,\n              img,\n              cssClass,\n              listName,\n              equipped: item[1].system.equipped || false // Track equipped status for sorting\n            }\n            // Sort actions: first equipped items alphabetically, then unequipped alphabetically\n          })\n          .sort((a, b) => {\n            // If displaying both equipped and unequipped items\n            if (this.displayUnequipped) {\n              // If one is equipped and the other isn't, equipped comes first\n              if (a.equipped && !b.equipped) return -1\n              if (!a.equipped && b.equipped) return 1\n            }\n            // Otherwise sort alphabetically by name\n            return a.name.localeCompare(b.name)\n          })\n        const groupData = { id: groupDataId, type: 'system' }\n        this.addActions(actions, groupData)\n      } catch (error) {\n        console.error(`Error building ${attackType} weapons: ${error.message}`)\n      }\n    }\n  }\n})\n","import { GROUP } from './constants.js'\n\n/**\n * Default layout and groups\n * @type {Object|null}\n */\nexport let DEFAULTS = null\n\nHooks.once('tokenActionHudCoreApiReady', async (coreModule) => {\n  try {\n    const groups = GROUP\n    Object.values(groups).forEach((group) => {\n      group.name = coreModule.api.Utils.i18n(group.name)\n      group.listName = `Group: ${coreModule.api.Utils.i18n(group.listName ?? group.name)}`\n    })\n    const groupsArray = Object.values(groups)\n    DEFAULTS = {\n      layout: [\n        {\n          nestId: 'weapons',\n          id: 'weapons',\n          name: coreModule.api.Utils.i18n('DS4.ItemTypeWeaponPlural'),\n          groups: [\n            { ...groups.melee, nestId: 'weapons_melee' },\n            { ...groups.ranged, nestId: 'weapons_ranged' }\n          ]\n        },\n        {\n          nestId: 'spells',\n          id: 'spells',\n          name: coreModule.api.Utils.i18n('DS4.ItemTypeSpellPlural'),\n          groups: [\n            { ...groups.spellcasting, nestId: 'spells_spellcasting' },\n            {\n              ...groups.targeted_spellcasting,\n              nestId: 'spells_tspellcasting'\n            }\n          ]\n        },\n        {\n          nestId: 'checks',\n          id: 'checks',\n          name: coreModule.api.Utils.i18n('DS4.Checks'),\n          groups: [{ ...groups.checks, nestId: 'checks_checks' }]\n        },\n        {\n          nestId: 'utility',\n          id: 'utility',\n          name: coreModule.api.Utils.i18n('tokenActionHud.utility'),\n          groups: [{ ...groups.token, nestId: 'utility_token' }]\n        }\n      ],\n      groups: groupsArray\n    }\n  } catch (error) {\n    console.error(`Error setting up default layout: ${error.message}`)\n  }\n})\n","export let RollHandler = null\n\nHooks.once('tokenActionHudCoreApiReady', async (coreModule) => {\n  /**\n   * Extends Token Action HUD Core's RollHandler class and handles action events triggered when an action is clicked\n   */\n  RollHandler = class RollHandler extends coreModule.api.RollHandler {\n    /**\n     * Handle action click\n     * Called by Token Action HUD Core when an action is left or right-clicked\n     * @override\n     * @param {object} event        The event\n     * @param {string} encodedValue The encoded value\n     */\n    async handleActionClick (event, encodedValue) {\n      const actionComponents = encodedValue.split('|')\n      const isMultiToken = actionComponents[0] === 'multitoken'\n      const actionTypeId = isMultiToken ? actionComponents[1] : actionComponents[0]\n      const actionId = isMultiToken ? actionComponents[2] : actionComponents[1]\n\n      const renderable = ['item']\n\n      if (renderable.includes(actionTypeId) && this.isRenderItem() && !isMultiToken) {\n        return this.doRenderItem(this.actor, actionId)\n      }\n\n      const knownCharacters = ['character', 'creature']\n\n      // If single actor is selected and not a multitoken action\n      if (this.actor && !isMultiToken) {\n        await this.#handleAction(\n          event,\n          this.actor,\n          this.token,\n          actionTypeId,\n          actionId,\n          false\n        )\n        return\n      }\n\n      const controlledTokens = canvas.tokens.controlled.filter((token) =>\n        knownCharacters.includes(token.actor?.type)\n      )\n\n      // If multiple actors are selected\n      for (const token of controlledTokens) {\n        const actor = token.actor\n        await this.#handleAction(event, actor, token, actionTypeId, actionId, isMultiToken)\n      }\n    }\n\n    /**\n     * Handle action hover\n     * Called by Token Action HUD Core when an action is hovered on or off\n     * @override\n     * @param {object} event        The event\n     * @param {string} encodedValue The encoded value\n     */\n    async handleActionHover (event, encodedValue) {\n      // This method will be implemented in a future update\n      // for handling hover events on actions\n    }\n\n    /**\n     * Handle group click\n     * Called by Token Action HUD Core when a group is right-clicked while the HUD is locked\n     * @override\n     * @param {object} event The event\n     * @param {object} group The group\n     */\n    async handleGroupClick (event, group) {\n      // This method will be implemented in a future update\n      // for handling group click events when the HUD is locked\n    }\n\n    /**\n     * Handle action\n     * @private\n     * @param {object} event        The event\n     * @param {object} actor        The actor\n     * @param {object} token        The token\n     * @param {string} actionTypeId The action type id\n     * @param {string} actionId     The actionId\n     * @param {boolean} isMultiToken Whether this is a multitoken action\n     */\n    async #handleAction (event, actor, token, actionTypeId, actionId, isMultiToken = false) {\n      try {\n        switch (actionTypeId) {\n          case 'item':\n            this.#handleItemAction(event, actor, actionId)\n            break\n          case 'utility':\n            this.#handleUtilityAction(token, actionId)\n            break\n          case 'check':\n            this.#handleCheckAction(event, actor, token, actionId, isMultiToken)\n            break\n          default:\n            console.warn(`Unknown action type: ${actionTypeId}`)\n        }\n      } catch (error) {\n        ui.notifications.error(`Error handling action: ${error.message}`)\n      }\n    }\n\n    /**\n     * Handle item action\n     * @private\n     * @param {object} event    The event\n     * @param {object} actor    The actor\n     * @param {string} actionId The action id\n     */\n    #handleItemAction (event, actor, actionId) {\n      const item = actor.items.get(actionId)\n      try {\n        item.roll(event)\n      } catch (error) {\n        ui.notifications.error(`Error rolling item: ${error.message}`)\n      }\n    }\n\n    /**\n     * Handle check action\n     * @private\n     * @param {object} event       The event\n     * @param {object} actor       The actor\n     * @param {object} token       The token object\n     * @param {string} checkValue  The check value to roll\n     * @param {boolean} isMultiToken Whether this is a multitoken action\n     */\n    #handleCheckAction (event, actor, token, checkValue, isMultiToken = false) {\n      try {\n        if (!actor) {\n          console.warn('Cannot roll check: No actor available')\n          return\n        }\n\n        if (!actor.rollCheck) {\n          console.warn(`Actor ${actor.name} (${actor.id}) does not have a rollCheck method`)\n          return\n        }\n\n        actor.rollCheck(checkValue, token.document)\n      } catch (error) {\n        ui.notifications.error(`Error rolling check: ${error.message}`)\n      }\n    }\n\n    /**\n     * Handle utility action\n     * @private\n     * @param {object} token    The token\n     * @param {string} actionId The action id\n     */\n    async #handleUtilityAction (token, actionId) {\n      try {\n        switch (actionId) {\n          case 'endTurn':\n            if (game.combat?.current?.tokenId === token.id) {\n              await game.combat?.nextTurn()\n            }\n            break\n          default:\n            console.warn(`Unknown utility action: ${actionId}`)\n        }\n      } catch (error) {\n        ui.notifications.error(`Error handling utility action: ${error.message}`)\n      }\n    }\n  }\n})\n","import { MODULE } from './constants.js'\n\n/**\n * Register module settings\n * Called by Token Action HUD Core to register Token Action HUD system module settings\n * @param {function} coreUpdate Token Action HUD Core update function\n */\nexport function register (coreUpdate) {\n  try {\n    game.settings.register(MODULE.ID, 'displayUnequipped', {\n      name: game.i18n.localize(\n        'tokenActionHud.ds4.settings.displayUnequipped.name'\n      ),\n      hint: game.i18n.localize(\n        'tokenActionHud.ds4.settings.displayUnequipped.hint'\n      ),\n      scope: 'client',\n      config: true,\n      type: Boolean,\n      default: false,\n      onChange: (value) => {\n        try {\n          coreUpdate(value)\n        } catch (error) {\n          console.error(`Error in displayUnequipped onChange: ${error.message}`)\n        }\n      }\n    })\n  } catch (error) {\n    console.error(`Error registering settings: ${error.message}`)\n  }\n}\n","// System Module Imports\nimport { ActionHandler } from './action-handler.js'\nimport { RollHandler as Core } from './roll-handler.js'\nimport { MODULE } from './constants.js'\nimport { DEFAULTS } from './defaults.js'\nimport * as systemSettings from './settings.js'\n\nexport let SystemManager = null\n\nHooks.once('tokenActionHudCoreApiReady', async (coreModule) => {\n  /**\n     * Extends Token Action HUD Core's SystemManager class\n     */\n  SystemManager = class SystemManager extends coreModule.api.SystemManager {\n    /**\n         * Returns an instance of the ActionHandler to Token Action HUD Core\n         * Called by Token Action HUD Core\n         * @override\n         * @returns {ActionHandler} The ActionHandler instance\n         */\n    getActionHandler () {\n      return new ActionHandler()\n    }\n\n    /**\n         * Returns a list of roll handlers to Token Action HUD Core\n         * Used to populate the Roll Handler module setting choices\n         * Called by Token Action HUD Core\n         * @override\n         * @returns {Record<string, string>} The available roll handlers\n         */\n    getAvailableRollHandlers () {\n      const coreTitle = 'Core Template'\n      const choices = { core: coreTitle }\n      return choices\n    }\n\n    /**\n         * Returns an instance of the RollHandler to Token Action HUD Core\n         * Called by Token Action HUD Core\n         * @override\n         * @param {string} rollHandlerId The roll handler ID\n         * @returns {Core}               The RollHandler instance\n         */\n    getRollHandler (rollHandlerId) {\n      let rollHandler\n      switch (rollHandlerId) {\n        case 'core':\n        default:\n          rollHandler = new Core()\n          break\n      }\n      return rollHandler\n    }\n\n    /**\n         * Returns the default layout and groups to Token Action HUD Core\n         * Called by Token Action HUD Core\n         * @override\n         * @returns {Promise<object>} The default layout and groups\n         */\n    async registerDefaults () {\n      return DEFAULTS\n    }\n\n    /**\n         * Register Token Action HUD system module settings\n         * Called by Token Action HUD Core\n         * @override\n         * @param {function} coreUpdate The Token Action HUD Core update function\n         */\n    registerSettings (coreUpdate) {\n      systemSettings.register(coreUpdate)\n    }\n\n    /**\n         * Returns styles to Token Action HUD Core\n         * Called by Token Action HUD Core\n         * @override\n         * @returns {{template: {class: string, file: string, moduleId: string, name: string}}} The TAH system styles\n         */\n    registerStyles () {\n      return {\n        template: {\n          class: 'tah-style-ds4-style', // The class to add to first DIV element\n          file: 'tah-ds4-style', // The file without the css extension\n          moduleId: MODULE.ID, // The module ID\n          name: 'DS4 Style' // The name to display in the Token Action HUD Core 'Style' module setting\n        }\n      }\n    }\n  }\n})\n","import { SystemManager } from './system-manager.js'\nimport { MODULE, REQUIRED_CORE_MODULE_VERSION } from './constants.js'\n\nHooks.on('tokenActionHudCoreApiReady', async () => {\n  /**\n     * Return the SystemManager and requiredCoreModuleVersion to Token Action HUD Core\n     */\n  try {\n    const module = game.modules.get(MODULE.ID)\n    if (!module) {\n      console.error(`${MODULE.ID} module not found`)\n      return\n    }\n\n    module.api = {\n      requiredCoreModuleVersion: REQUIRED_CORE_MODULE_VERSION,\n      SystemManager\n    }\n\n    Hooks.call('tokenActionHudSystemReady', module)\n    console.log(`${MODULE.ID} | System ready`)\n  } catch (error) {\n    console.error(`${MODULE.ID} | Error initializing module:`, error)\n  }\n})\n\n// Log initialization\nHooks.once('init', () => {\n  console.log(`${MODULE.ID} | Initializing DS4 Token Action HUD`)\n})\n"],"names":["MODULE","ID","CORE_MODULE","REQUIRED_CORE_MODULE_VERSION","GROUP","spellcasting","id","name","type","targeted_spellcasting","melee","ranged","checks","token","Utils","Hooks","once","async","coreModule","getSetting","key","defaultValue","value","game","settings","get","error","api","Logger","debug","message","setSetting","result","set","validateObject","obj","requiredProps","every","prop","ActionHandler","buildSystemActions","groupIds","this","actors","actor","getSelectedActors","displayUnequipped","actorType","items","sortItemsByName","buildCharacterActions","buildMultipleTokenActions","console","ui","notifications","buildWeapons","buildSpells","buildChecks","length","groupData","tokenCountInfo","encodedValue","join","delimiter","cssClass","addActions","buildMultiTokenChecks","tokens","canvas","controlled","uniqueActors","actorIds","Set","filter","forEach","has","add","push","actionType","groupId","system","warn","actions","Object","entries","map","check","checkId","translationKey","charAt","toUpperCase","slice","i18n","img","CONFIG","DS4","icons","listName","info1","text","valueOf","sort","a","b","localeCompare","validActors","keys","referenceActor","checkIds","iconError","innerError","action","itemTypes","buildSpellsByType","spellType","groupDataId","combatValues","total","el","includes","equipped","item","itemId","label","spellValue","numericalMod","spellModifier","numerical","undefined","numericValue","Number","isNaN","Error","infoText","class","buildWeaponsByType","attackType","attackValue","weaponBonusRaw","weaponBonus","DEFAULTS","groups","values","group","groupsArray","layout","nestId","RollHandler","register","coreUpdate","localize","hint","scope","config","Boolean","default","onChange","handleActionClick","event","actionComponents","split","isMultiToken","actionTypeId","actionId","isRenderItem","doRenderItem","knownCharacters","handleAction","controlledTokens","handleActionHover","handleGroupClick","handleItemAction","handleUtilityAction","handleCheckAction","roll","checkValue","rollCheck","document","combat","current","tokenId","nextTurn","SystemManager","getActionHandler","getAvailableRollHandlers","core","getRollHandler","rollHandlerId","rollHandler","Core","registerDefaults","registerSettings","systemSettings.register","registerStyles","template","file","moduleId","on","module","modules","requiredCoreModuleVersion","call","log"],"mappings":"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"}