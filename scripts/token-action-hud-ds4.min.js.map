{"version":3,"file":"token-action-hud-ds4.min.js","sources":["constants.js","utils.js","action-handler.js","defaults.js","roll-handler.js","settings.js","system-manager.js","init.js"],"sourcesContent":["/**\n * Module-based constants\n * @type {{ID: string}}\n */\nexport const MODULE = {\n  ID: \"token-action-hud-ds4\",\n};\n\n/**\n * Core module\n * @type {{ID: string}}\n */\nexport const CORE_MODULE = {\n  ID: \"token-action-hud-core\",\n};\n\n/**\n * Core module version required by the system module\n * @type {string}\n */\nexport const REQUIRED_CORE_MODULE_VERSION = \"2.0\";\n\n/**\n * Groups configuration for the Token Action HUD\n * @type {Object<string, {id: string, name: string, type: string, listName?: string}>}\n */\nexport const GROUP = {\n  spellcasting: {\n    id: \"spellcasting\",\n    name: \"DS4.CombatValuesSpellcasting\",\n    type: \"system\",\n  },\n  targeted_spellcasting: {\n    id: \"targeted_spellcasting\",\n    name: \"DS4.CombatValuesTargetedSpellcasting\",\n    type: \"system\",\n  },\n  melee: {\n    id: \"melee\",\n    name: \"DS4.AttackTypeMelee\",\n    type: \"system\",\n  },\n  ranged: {\n    id: \"ranged\",\n    name: \"DS4.AttackTypeRanged\",\n    type: \"system\",\n  },\n  checks: {\n    id: \"checks\",\n    name: \"DS4.Checks\",\n    type: \"system\",\n  },\n  token: { \n    id: \"token\", \n    name: \"tokenActionHud.token\", \n    type: \"system\" \n  },\n};\n","import { MODULE } from './constants.js'\n\nexport let Utils = null\n\nHooks.once('tokenActionHudCoreApiReady', async (coreModule) => {\n    /**\n     * Utility functions\n     */\n    Utils = class Utils {\n        /**\n         * Get setting\n         * @param {string} key               The key\n         * @param {string=null} defaultValue The default value\n         * @returns {string}                 The setting value\n         */\n        static getSetting (key, defaultValue = null) {\n            let value = defaultValue ?? null\n            try {\n                value = game.settings.get(MODULE.ID, key)\n            } catch (error) {\n                coreModule.api.Logger.debug(`Error fetching setting '${key}': ${error.message}`)\n            }\n            return value\n        }\n\n        /**\n         * Set setting\n         * @param {string} key   The key\n         * @param {string} value The value\n         * @returns {Promise<string|null>} The updated value or null if there was an error\n         */\n        static async setSetting (key, value) {\n            try {\n                const result = await game.settings.set(MODULE.ID, key, value)\n                coreModule.api.Logger.debug(`Setting '${key}' successfully set to '${value}'`)\n                return result\n            } catch (error) {\n                coreModule.api.Logger.error(`Error setting '${key}': ${error.message}`)\n                return null\n            }\n        }\n        \n        /**\n         * Validates if an object has the expected properties\n         * @param {object} obj - The object to validate\n         * @param {string[]} requiredProps - Array of required property names\n         * @returns {boolean} True if the object has all required properties\n         */\n        static validateObject(obj, requiredProps) {\n            if (!obj || typeof obj !== 'object') return false\n            return requiredProps.every(prop => prop in obj)\n        }\n    }\n})\n","// System Module Imports\nimport { Utils } from \"./utils.js\";\n\nexport let ActionHandler = null;\n\nHooks.once(\"tokenActionHudCoreApiReady\", async (coreModule) => {\n  /**\n   * Extends Token Action HUD Core's ActionHandler class and builds system-defined actions for the HUD\n   */\n  ActionHandler = class ActionHandler extends coreModule.api.ActionHandler {\n    /**\n     * Build system actions\n     * Called by Token Action HUD Core\n     * @override\n     * @param {array} groupIds\n     */\n    async buildSystemActions(groupIds) {\n      try {\n        // Set actor and token variables\n        this.actors = !this.actor ? this.#getSelectedActors() : [this.actor];\n\n        // Settings\n        this.displayUnequipped = Utils.getSetting(\"displayUnequipped\");\n\n        if (this.actor) {\n          // Handle single actor\n          this.actorType = this.actor.type;\n\n          // Set items variable\n          let items = this.actor.items;\n          items = coreModule.api.Utils.sortItemsByName(items);\n          this.items = items;\n\n          if (this.actorType === \"character\" || this.actorType === \"creature\") {\n            this.#buildCharacterActions();\n          }\n        } else {\n          // Handle multiple actors\n          this.#buildMultipleTokenActions();\n        }\n      } catch (error) {\n        console.error(`Error building system actions: ${error.message}`);\n        ui.notifications?.error(\n          `Error building system actions: ${error.message}`,\n        );\n      }\n    }\n\n    /**\n     * Build character actions\n     * @private\n     */\n    #buildCharacterActions() {\n      try {\n        this.#buildWeapons(\"item\", [\"weapon\"]);\n        this.#buildSpells(\"item\", [\"spell\"]);\n        this.#buildChecks(\"check\", \"checks\");\n      } catch (error) {\n        console.error(`Error building character actions: ${error.message}`);\n        ui.notifications?.error(\n          `Error building character actions: ${error.message}`,\n        );\n      }\n    }\n\n    /**\n     * Build multiple token actions\n     * @private\n     * @returns {object}\n     */\n    #buildMultipleTokenActions() {\n      if (!this.actors || this.actors.length === 0) return;\n\n      try {\n        // Create a utility group for multiple token selection\n        const groupData = { id: \"token\", type: \"system\" };\n\n        // Add selected tokens count\n        const tokenCountInfo = {\n          id: \"token-count-info\",\n          name: `${this.actors.length} tokens selected`,\n          encodedValue: [\"utility\", \"tokenCount\"].join(this.delimiter),\n          cssClass: \"inactive\",\n        };\n\n        this.addActions([tokenCountInfo], groupData);\n\n        // Add skill checks for multiple tokens\n        if (this.actors && this.actors.length > 0) {\n          this.#buildMultiTokenChecks(\"check\", \"checks\");\n        }\n      } catch (error) {\n        console.error(\n          `Error building multiple token actions: ${error.message}`,\n        );\n      }\n    }\n\n    /**\n     * Get all selected actors\n     * @private\n     * @returns {Array} Array of selected actors\n     */\n    #getSelectedActors() {\n      try {\n        const tokens = canvas.tokens.controlled;\n        if (!tokens || tokens.length === 0) return [];\n\n        return tokens\n          .filter((token) => token.actor)\n          .map((token) => token.actor);\n      } catch (error) {\n        console.error(`Error getting selected actors: ${error.message}`);\n        return [];\n      }\n    }\n\n    /**\n     * Build Checks\n     * @private\n     * @param {string} actionType\n     * @param {string} groupId\n     */\n    #buildChecks(actionType, groupId) {\n      try {\n        if (!this.actor?.system?.checks) {\n          console.warn(\"Actor is missing system.checks property\");\n          return;\n        }\n\n        const actions = Object.entries(this.actor.system.checks).map(\n          (check) => {\n            const checkId = check[0];\n            const capitalizedCheckId =\n              checkId.charAt(0).toUpperCase() + checkId.slice(1);\n            const translationKey = `DS4.Checks${capitalizedCheckId}`;\n            const id = `${actionType}-${checkId}`;\n            const label = coreModule.api.Utils.i18n(translationKey);\n            const name = coreModule.api.Utils.i18n(translationKey);\n            const img = CONFIG.DS4.icons.checks[checkId];\n            const listName = `${actionType}${coreModule.api.Utils.i18n(`DS4.Checks${checkId}`)}`;\n            const encodedValue = [actionType, checkId].join(this.delimiter);\n            const infoText = { text: check[1].valueOf() };\n            return {\n              id,\n              name,\n              img,\n              encodedValue,\n              info1: infoText,\n              listName,\n            };\n          },\n        );\n        const groupData = { id: groupId, type: \"system\" };\n        this.addActions(actions, groupData);\n      } catch (error) {\n        console.error(`Error building checks: ${error.message}`);\n      }\n    }\n\n    /**\n     * Build Checks for multiple tokens\n     * @private\n     * @param {string} actionType\n     * @param {string} groupId\n     */\n    #buildMultiTokenChecks(actionType, groupId) {\n      try {\n        // Check if we have valid actors with check data\n        const validActors = this.actors.filter(\n          (actor) =>\n            actor?.system?.checks &&\n            Object.keys(actor.system.checks).length > 0,\n        );\n\n        if (validActors.length === 0) {\n          console.warn(\"No selected actors have valid check data\");\n          return;\n        }\n\n        // Get check IDs from the first valid actor (assuming all actors have the same checks)\n        const referenceActor = validActors[0];\n\n        if (!referenceActor?.system?.checks) {\n          console.warn(\"Reference actor is missing system.checks property\");\n          return;\n        }\n\n        const checkIds = Object.keys(referenceActor.system.checks);\n\n        if (checkIds.length === 0) {\n          console.warn(\"Reference actor has no checks defined\");\n          return;\n        }\n\n        const actions = checkIds\n          .map((checkId) => {\n            try {\n              const capitalizedCheckId =\n                checkId.charAt(0).toUpperCase() + checkId.slice(1);\n              const translationKey = `DS4.Checks${capitalizedCheckId}`;\n              const id = `multitoken-${actionType}-${checkId}`;\n              const label = coreModule.api.Utils.i18n(translationKey);\n              const name = coreModule.api.Utils.i18n(translationKey);\n              let img = \"\";\n\n              // Safely access the icon if it exists\n              try {\n                img = CONFIG.DS4?.icons?.checks?.[checkId] || \"\";\n              } catch (iconError) {\n                console.warn(\n                  `Could not find icon for check: ${checkId}`,\n                  iconError,\n                );\n              }\n\n              const listName = `${actionType}${coreModule.api.Utils.i18n(`DS4.Checks${checkId}`)}`;\n              const encodedValue = [\"multitoken\", actionType, checkId].join(\n                this.delimiter,\n              );\n\n              // For multiple tokens, use a descriptive label to indicate multi-roll\n              return {\n                id,\n                name,\n                img,\n                encodedValue,\n                listName,\n              };\n            } catch (innerError) {\n              console.error(\n                `Error building action for check ${checkId}: ${innerError.message}`,\n              );\n              return null;\n            }\n          })\n          .filter((action) => action !== null); // Filter out any null actions\n\n        if (actions.length === 0) {\n          console.warn(\n            \"No valid actions were created for multiple token checks\",\n          );\n          return;\n        }\n\n        // Add a \"Checks\" header/group for multiple tokens\n        const groupData = { id: groupId, type: \"system\" };\n        this.addActions(actions, groupData);\n      } catch (error) {\n        console.error(`Error building multiple token checks: ${error.message}`);\n      }\n    }\n\n    /**\n     * Build Spells\n     * @private\n     * @param {string} groupId\n     * @param {string[]} itemTypes\n     */\n    #buildSpells(groupId, itemTypes) {\n      try {\n        this.#buildSpellsByType(\n          groupId,\n          itemTypes,\n          \"spellcasting\",\n          \"spellcasting\",\n        );\n        this.#buildSpellsByType(\n          groupId,\n          itemTypes,\n          \"targetedSpellcasting\",\n          \"targeted_spellcasting\",\n        );\n      } catch (error) {\n        console.error(`Error building spells: ${error.message}`);\n      }\n    }\n\n    /**\n     * Build Spells by type\n     * @private\n     * @param {string} groupId - The group ID\n     * @param {string[]} itemTypes - Array of item types to include\n     * @param {string} spellType - Type of spell (\"spellcasting\" or \"targetedSpellcasting\")\n     * @param {string} groupDataId - ID for the group data\n     */\n    #buildSpellsByType(groupId, itemTypes, spellType, groupDataId) {\n      try {\n        if (!this.actor?.system?.combatValues?.[spellType]?.total) {\n          console.warn(`Actor is missing combatValues.${spellType}`);\n          return;\n        }\n\n        if (!this.actor.items) {\n          console.warn(\"Actor has no items\");\n          return;\n        }\n\n        const actionType = groupId;\n        const actions = Object.entries(\n          this.actor.items.filter(\n            (el) =>\n              itemTypes.includes(el.type) &&\n              el.system.spellType === spellType &&\n              (this.displayUnequipped || el.system.equipped === true),\n          ),\n        ).map((item) => {\n          const itemId = item[1].id;\n          const id = `${actionType}-${item[1].id}`;\n          const label = item[1].name;\n          const name = item[1].name;\n          const listName = `${actionType}${label}`;\n          const encodedValue = [actionType, itemId].join(this.delimiter);\n          const img = item[1].img;\n          const infoText = {\n            text: this.actor.system.combatValues[spellType].total.valueOf(),\n            class: \"custominfo\",\n          };\n          const cssClass = \"\";\n          return {\n            id,\n            name,\n            encodedValue,\n            info1: infoText,\n            img,\n            cssClass,\n            listName,\n          };\n        });\n        const groupData = { id: groupDataId, type: \"system\" };\n        this.addActions(actions, groupData);\n      } catch (error) {\n        console.error(`Error building ${spellType} spells: ${error.message}`);\n      }\n    }\n\n    /**\n     * Build Weapons\n     * @private\n     * @param {string} groupId\n     * @param {string[]} itemTypes\n     */\n    #buildWeapons(groupId, itemTypes) {\n      try {\n        this.#buildWeaponsByType(groupId, itemTypes, \"melee\", \"melee\");\n        this.#buildWeaponsByType(groupId, itemTypes, \"ranged\", \"ranged\");\n      } catch (error) {\n        console.error(`Error building weapons: ${error.message}`);\n      }\n    }\n\n    /**\n     * Build Weapons by type\n     * @private\n     * @param {string} groupId - The group ID\n     * @param {string[]} itemTypes - Array of item types to include\n     * @param {string} attackType - Type of attack (\"melee\" or \"ranged\")\n     * @param {string} groupDataId - ID for the group data\n     */\n    #buildWeaponsByType(groupId, itemTypes, attackType, groupDataId) {\n      try {\n        if (!this.actor?.system?.combatValues?.[`${attackType}Attack`]?.total) {\n          console.warn(`Actor is missing combatValues.${attackType}Attack`);\n          return;\n        }\n\n        const actionType = groupId;\n        const attackValue =\n          this.actor.system.combatValues[`${attackType}Attack`].total;\n\n        if (!this.actor.items) {\n          console.warn(\"Actor has no items\");\n          return;\n        }\n\n        const actions = Object.entries(\n          this.actor.items.filter(\n            (el) =>\n              itemTypes.includes(el.type) &&\n              el.system.attackType === attackType &&\n              (this.displayUnequipped || el.system.equipped === true),\n          ),\n        ).map((item) => {\n          const itemId = item[1].id;\n          const id = `${actionType}-${item[1].id}`;\n          const label = item[1].name;\n          const name = item[1].name;\n          const listName = `${actionType}${label}`;\n          const encodedValue = [actionType, itemId].join(this.delimiter);\n          const img = item[1].img;\n          const weaponBonus = item[1].system.weaponBonus || 0;\n          const infoText = {\n            text: attackValue + weaponBonus,\n            class: \"custominfo\",\n          };\n          const cssClass = \"\";\n          return {\n            id,\n            name,\n            encodedValue,\n            info1: infoText,\n            img,\n            cssClass,\n            listName,\n          };\n        });\n        const groupData = { id: groupDataId, type: \"system\" };\n        this.addActions(actions, groupData);\n      } catch (error) {\n        console.error(`Error building ${attackType} weapons: ${error.message}`);\n      }\n    }\n  };\n});\n","import { GROUP } from \"./constants.js\";\n\n/**\n * Default layout and groups\n * @type {Object|null}\n */\nexport let DEFAULTS = null;\n\nHooks.once(\"tokenActionHudCoreApiReady\", async (coreModule) => {\n  try {\n    const groups = GROUP;\n    Object.values(groups).forEach((group) => {\n      group.name = coreModule.api.Utils.i18n(group.name);\n      group.listName = `Group: ${coreModule.api.Utils.i18n(group.listName ?? group.name)}`;\n    });\n    const groupsArray = Object.values(groups);\n    DEFAULTS = {\n      layout: [\n        {\n          nestId: \"weapons\",\n          id: \"weapons\",\n          name: coreModule.api.Utils.i18n(\"DS4.ItemTypeWeaponPlural\"),\n          groups: [\n            { ...groups.melee, nestId: \"weapons_melee\" },\n            { ...groups.ranged, nestId: \"weapons_ranged\" },\n          ],\n        },\n        {\n          nestId: \"spells\",\n          id: \"spells\",\n          name: coreModule.api.Utils.i18n(\"DS4.ItemTypeSpellPlural\"),\n          groups: [\n            { ...groups.spellcasting, nestId: \"spells_spellcasting\" },\n            {\n              ...groups.targeted_spellcasting,\n              nestId: \"spells_tspellcasting\",\n            },\n          ],\n        },\n        {\n          nestId: \"checks\",\n          id: \"checks\",\n          name: coreModule.api.Utils.i18n(\"DS4.Checks\"),\n          groups: [{ ...groups.checks, nestId: \"checks_checks\" }],\n        },\n        {\n          nestId: \"utility\",\n          id: \"utility\",\n          name: coreModule.api.Utils.i18n(\"tokenActionHud.utility\"),\n          groups: [{ ...groups.token, nestId: \"utility_token\" }],\n        },\n      ],\n      groups: groupsArray,\n    };\n  } catch (error) {\n    console.error(`Error setting up default layout: ${error.message}`);\n  }\n});\n","export let RollHandler = null;\n\nHooks.once(\"tokenActionHudCoreApiReady\", async (coreModule) => {\n  /**\n   * Extends Token Action HUD Core's RollHandler class and handles action events triggered when an action is clicked\n   */\n  RollHandler = class RollHandler extends coreModule.api.RollHandler {\n    /**\n     * Handle action click\n     * Called by Token Action HUD Core when an action is left or right-clicked\n     * @override\n     * @param {object} event        The event\n     * @param {string} encodedValue The encoded value\n     */\n    async handleActionClick(event, encodedValue) {\n      const actionComponents = encodedValue.split(\"|\");\n      const isMultiToken = actionComponents[0] === \"multitoken\";\n      const actionTypeId = isMultiToken ? actionComponents[1] : actionComponents[0];\n      const actionId = isMultiToken ? actionComponents[2] : actionComponents[1];\n\n      const renderable = [\"item\"];\n\n      if (renderable.includes(actionTypeId) && this.isRenderItem() && !isMultiToken) {\n        return this.doRenderItem(this.actor, actionId);\n      }\n\n      const knownCharacters = [\"character\", \"creature\"];\n\n      // If single actor is selected and not a multitoken action\n      if (this.actor && !isMultiToken) {\n        await this.#handleAction(\n          event,\n          this.actor,\n          this.token,\n          actionTypeId,\n          actionId,\n          false\n        );\n        return;\n      }\n\n      const controlledTokens = canvas.tokens.controlled.filter((token) =>\n        knownCharacters.includes(token.actor?.type),\n      );\n\n      // If multiple actors are selected\n      for (const token of controlledTokens) {\n        const actor = token.actor;\n        await this.#handleAction(event, actor, token, actionTypeId, actionId, isMultiToken);\n      }\n    }\n\n    /**\n     * Handle action hover\n     * Called by Token Action HUD Core when an action is hovered on or off\n     * @override\n     * @param {object} event        The event\n     * @param {string} encodedValue The encoded value\n     */\n    async handleActionHover(event, encodedValue) {\n      // This method will be implemented in a future update\n      // for handling hover events on actions\n    }\n\n    /**\n     * Handle group click\n     * Called by Token Action HUD Core when a group is right-clicked while the HUD is locked\n     * @override\n     * @param {object} event The event\n     * @param {object} group The group\n     */\n    async handleGroupClick(event, group) {\n      // This method will be implemented in a future update\n      // for handling group click events when the HUD is locked\n    }\n\n    /**\n     * Handle action\n     * @private\n     * @param {object} event        The event\n     * @param {object} actor        The actor\n     * @param {object} token        The token\n     * @param {string} actionTypeId The action type id\n     * @param {string} actionId     The actionId\n     * @param {boolean} isMultiToken Whether this is a multitoken action\n     */\n    async #handleAction(event, actor, token, actionTypeId, actionId, isMultiToken = false) {\n      try {\n        switch (actionTypeId) {\n          case \"item\":\n            this.#handleItemAction(event, actor, actionId);\n            break;\n          case \"utility\":\n            this.#handleUtilityAction(token, actionId);\n            break;\n          case \"check\":\n            this.#handleCheckAction(event, actor, token, actionId, isMultiToken);\n            break;\n          default:\n            console.warn(`Unknown action type: ${actionTypeId}`);\n        }\n      } catch (error) {\n        ui.notifications.error(`Error handling action: ${error.message}`);\n      }\n    }\n\n    /**\n     * Handle item action\n     * @private\n     * @param {object} event    The event\n     * @param {object} actor    The actor\n     * @param {string} actionId The action id\n     */\n    #handleItemAction(event, actor, actionId) {\n      const item = actor.items.get(actionId);\n      try {\n        item.roll(event);\n      } catch (error) {\n        ui.notifications.error(`Error rolling item: ${error.message}`);\n      }\n    }\n\n    /**\n     * Handle check action\n     * @private\n     * @param {object} event       The event\n     * @param {object} actor       The actor\n     * @param {object} token       The token object\n     * @param {string} checkValue  The check value to roll\n     * @param {boolean} isMultiToken Whether this is a multitoken action\n     */\n    #handleCheckAction(event, actor, token, checkValue, isMultiToken = false) {\n      try {\n        if (!actor) {\n          console.warn(\"Cannot roll check: No actor available\");\n          return;\n        }\n      \n        if (!actor.rollCheck) {\n          console.warn(`Actor ${actor.name} (${actor.id}) does not have a rollCheck method`);\n          return;\n        }\n      \n        actor.rollCheck(checkValue, token.document);\n      } catch (error) {\n        ui.notifications.error(`Error rolling check: ${error.message}`);\n      }\n    }\n\n    /**\n     * Handle utility action\n     * @private\n     * @param {object} token    The token\n     * @param {string} actionId The action id\n     */\n    async #handleUtilityAction(token, actionId) {\n      try {\n        switch (actionId) {\n          case \"endTurn\":\n            if (game.combat?.current?.tokenId === token.id) {\n              await game.combat?.nextTurn();\n            }\n            break;\n          default:\n            console.warn(`Unknown utility action: ${actionId}`);\n        }\n      } catch (error) {\n        ui.notifications.error(`Error handling utility action: ${error.message}`);\n      }\n    }\n  };\n});\n","import { MODULE } from \"./constants.js\";\n\n/**\n * Register module settings\n * Called by Token Action HUD Core to register Token Action HUD system module settings\n * @param {function} coreUpdate Token Action HUD Core update function\n */\nexport function register(coreUpdate) {\n  try {\n    game.settings.register(MODULE.ID, \"displayUnequipped\", {\n      name: game.i18n.localize(\n        \"tokenActionHud.ds4.settings.displayUnequipped.name\"\n      ),\n      hint: game.i18n.localize(\n        \"tokenActionHud.ds4.settings.displayUnequipped.hint\"\n      ),\n      scope: \"client\",\n      config: true,\n      type: Boolean,\n      default: false,\n      onChange: (value) => {\n        try {\n          coreUpdate(value);\n        } catch (error) {\n          console.error(`Error in displayUnequipped onChange: ${error.message}`);\n        }\n      },\n    });\n  } catch (error) {\n    console.error(`Error registering settings: ${error.message}`);\n  }\n}\n","// System Module Imports\nimport { ActionHandler } from './action-handler.js'\nimport { RollHandler as Core } from './roll-handler.js'\nimport { MODULE } from './constants.js'\nimport { DEFAULTS } from './defaults.js'\nimport * as systemSettings from './settings.js'\n\nexport let SystemManager = null\n\nHooks.once('tokenActionHudCoreApiReady', async (coreModule) => {\n    /**\n     * Extends Token Action HUD Core's SystemManager class\n     */\n    SystemManager = class SystemManager extends coreModule.api.SystemManager {\n        /**\n         * Returns an instance of the ActionHandler to Token Action HUD Core\n         * Called by Token Action HUD Core\n         * @override\n         * @returns {ActionHandler} The ActionHandler instance\n         */\n        getActionHandler () {\n            return new ActionHandler()\n        }\n\n        /**\n         * Returns a list of roll handlers to Token Action HUD Core\n         * Used to populate the Roll Handler module setting choices\n         * Called by Token Action HUD Core\n         * @override\n         * @returns {Record<string, string>} The available roll handlers\n         */\n        getAvailableRollHandlers () {\n            const coreTitle = 'Core Template'\n            const choices = { core: coreTitle }\n            return choices\n        }\n\n        /**\n         * Returns an instance of the RollHandler to Token Action HUD Core\n         * Called by Token Action HUD Core\n         * @override\n         * @param {string} rollHandlerId The roll handler ID\n         * @returns {Core}               The RollHandler instance\n         */\n        getRollHandler (rollHandlerId) {\n            let rollHandler\n            switch (rollHandlerId) {\n            case 'core':\n            default:\n                rollHandler = new Core()\n                break\n            }\n            return rollHandler\n        }\n\n        /**\n         * Returns the default layout and groups to Token Action HUD Core\n         * Called by Token Action HUD Core\n         * @override\n         * @returns {Promise<object>} The default layout and groups\n         */\n        async registerDefaults () {\n            return DEFAULTS\n        }\n\n        /**\n         * Register Token Action HUD system module settings\n         * Called by Token Action HUD Core\n         * @override\n         * @param {function} coreUpdate The Token Action HUD Core update function\n         */\n        registerSettings (coreUpdate) {\n            systemSettings.register(coreUpdate)\n        }\n\n        /**\n         * Returns styles to Token Action HUD Core\n         * Called by Token Action HUD Core\n         * @override\n         * @returns {{template: {class: string, file: string, moduleId: string, name: string}}} The TAH system styles\n         */\n        registerStyles () {\n            return {\n                template: {\n                    class: 'tah-style-ds4-style', // The class to add to first DIV element\n                    file: 'tah-ds4-style', // The file without the css extension\n                    moduleId: MODULE.ID, // The module ID\n                    name: 'DS4 Style' // The name to display in the Token Action HUD Core 'Style' module setting\n                }\n            }\n        }\n    }\n})\n","import { SystemManager } from './system-manager.js'\nimport { MODULE, REQUIRED_CORE_MODULE_VERSION } from './constants.js'\n\nHooks.on('tokenActionHudCoreApiReady', async () => {\n    /**\n     * Return the SystemManager and requiredCoreModuleVersion to Token Action HUD Core\n     */\n    try {\n        const module = game.modules.get(MODULE.ID)\n        if (!module) {\n            console.error(`${MODULE.ID} module not found`)\n            return\n        }\n        \n        module.api = {\n            requiredCoreModuleVersion: REQUIRED_CORE_MODULE_VERSION,\n            SystemManager\n        }\n        \n        Hooks.call('tokenActionHudSystemReady', module)\n        console.log(`${MODULE.ID} | System ready`)\n    } catch (error) {\n        console.error(`${MODULE.ID} | Error initializing module:`, error)\n    }\n})\n\n// Log initialization\nHooks.once('init', () => {\n    console.log(`${MODULE.ID} | Initializing DS4 Token Action HUD`)\n})\n"],"names":["MODULE","ID","CORE_MODULE","REQUIRED_CORE_MODULE_VERSION","GROUP","spellcasting","id","name","type","targeted_spellcasting","melee","ranged","checks","token","Utils","Hooks","once","async","coreModule","getSetting","key","defaultValue","value","game","settings","get","error","api","Logger","debug","message","setSetting","result","set","validateObject","obj","requiredProps","every","prop","ActionHandler","buildSystemActions","groupIds","this","actors","actor","getSelectedActors","displayUnequipped","actorType","items","sortItemsByName","buildCharacterActions","buildMultipleTokenActions","console","ui","notifications","buildWeapons","buildSpells","buildChecks","length","groupData","tokenCountInfo","encodedValue","join","delimiter","cssClass","addActions","buildMultiTokenChecks","tokens","canvas","controlled","filter","map","actionType","groupId","system","warn","actions","Object","entries","check","checkId","translationKey","charAt","toUpperCase","slice","i18n","img","CONFIG","DS4","icons","listName","info1","text","valueOf","validActors","keys","referenceActor","checkIds","iconError","innerError","action","itemTypes","buildSpellsByType","spellType","groupDataId","combatValues","total","el","includes","equipped","item","itemId","label","class","buildWeaponsByType","attackType","attackValue","weaponBonus","DEFAULTS","groups","values","forEach","group","groupsArray","layout","nestId","RollHandler","register","coreUpdate","localize","hint","scope","config","Boolean","default","onChange","handleActionClick","event","actionComponents","split","isMultiToken","actionTypeId","actionId","isRenderItem","doRenderItem","knownCharacters","handleAction","controlledTokens","handleActionHover","handleGroupClick","handleItemAction","handleUtilityAction","handleCheckAction","roll","checkValue","rollCheck","document","combat","current","tokenId","nextTurn","SystemManager","getActionHandler","getAvailableRollHandlers","core","getRollHandler","rollHandlerId","rollHandler","Core","registerDefaults","registerSettings","systemSettings.register","registerStyles","template","file","moduleId","on","module","modules","requiredCoreModuleVersion","call","log"],"mappings":"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"}