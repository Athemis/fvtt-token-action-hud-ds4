name: Create Module Files For GitHub Release
on:
  release:
    types: [published]

env:
  package_name: Token Action HUD DS4
  package_id: token-action-hud-ds4

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Extract Version From Tag
        id: get_version
        uses: battila7/get-version-action@v2

      - name: Substitute Manifest and Download Links For Versioned Ones
        id: sub_manifest_link_version
        uses: microsoft/variable-substitution@v1
        with:
          files: "module.json"
        env:
          version: ${{steps.get_version.outputs.version-without-v}}
          url: https://github.com/${{github.repository}}
          manifest: https://github.com/${{github.repository}}/releases/latest/download/module.json
          download: https://github.com/${{github.repository}}/releases/download/${{github.event.release.tag_name}}/module.zip

      # Run build
      - uses: actions/setup-node@v3
        with:
          node-version: "22"
      - run: npm install
      - run: npm run build

      # Create a "module.zip" archive containing all the module's required files.
      # If you have other directories or files that will need to be added to
      # your packaged module, add them here.
      - run: zip -r ./module.zip module.json readme.md license.md languages/ scripts/token-action-hud-ds4.min.js* styles/

      # Update the GitHub release with the manifest and module archive files.
      - name: Update Release with Files
        id: create_version_release
        uses: ncipollo/release-action@v1
        with:
          allowUpdates: true
          name: ${{ github.event.release.name }}
          draft: ${{ github.event.release.unpublished }}
          prerelease: ${{ github.event.release.prerelease }}
          token: ${{ secrets.GITHUB_TOKEN }}
          artifacts: "./module.json, ./module.zip"
          tag: ${{ github.event.release.tag_name }}
          body: ${{ github.event.release.body }}

      - name: Get Compatibility
        if: "!github.event.release.prerelease"
        run: |
          echo 'COMPATIBILITY<<EOF' >> $GITHUB_ENV
          cat module.json | jq .compatibility >> $GITHUB_ENV
          echo 'EOF' >> $GITHUB_ENV

      - name: Send package to FoundryVTT registry
        if: "!github.event.release.prerelease"
        run: |
          HTTP_RESPONSE=$(curl --silent --write-out "HTTPSTATUS:%{http_code}" -X POST 'https://api.foundryvtt.com/_api/packages/release_version/' \
          --header 'Authorization: ${{ secrets.PACKAGE_RELEASE_TOKEN }}' \
          --header 'Content-Type: application/json' \
          --data '{
              "id": "${{env.package_id}}",
              "release": {
                  "version": "${{ github.event.release.tag_name }}",
                  "manifest": "https://github.com/${{github.repository}}/releases/download/${{github.event.release.tag_name}}/module.json",
                  "notes": "https://github.com/${{github.repository}}/releases/tag/${{github.event.release.tag_name}}",
                  "compatibility": ${{ env.COMPATIBILITY }}
              }
          }')

          # extract the body
          HTTP_BODY=$(echo $HTTP_RESPONSE | sed -e 's/HTTPSTATUS\:.*//g')

          # extract the status
          HTTP_STATUS=$(echo $HTTP_RESPONSE | tr -d '\n' | sed -e 's/.*HTTPSTATUS://')

          # print the body
          echo "$HTTP_BODY"

          # example using the status
          if [ ! $HTTP_STATUS -eq 200  ]; then
            echo "Error [HTTP status: $HTTP_STATUS]"
            exit 1
          fi
